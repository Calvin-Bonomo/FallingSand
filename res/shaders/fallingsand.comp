#version 460

layout(local_size_x=32, local_size_y=32) in;

layout(r32ui) uniform uimage2D buf;
uniform uint iteration;
uniform ivec2 simSize;

const uint GAS = 1;
const uint LIQUID = 3;
const uint SOLID = 6;

const uint AIR = 0;
const uint SMOKE = 1;
const uint OIL = 2;
const uint WATER = 3;
const uint SAND = 4;
const uint WOOD = 5;
const uint WALL = 6;
const uint FIRE = 7;

uvec4 getNeighborhood(ivec2 pos) {
  uvec4 data = uvec4(imageLoad(buf, pos).r, 0, 0, 0);
  data.y = imageLoad(buf, pos + ivec2(1,  0)).r;
  data.z = imageLoad(buf, pos + ivec2(0, -1)).r;
  data.w = imageLoad(buf, pos + ivec2(1, -1)).r;
  return data;
}

bool isFlammable(uint cell) {
  return cell == WOOD || cell == OIL;
}

bool isFlammable(uvec3 cell) {
  return isFlammable(cell.x) && isFlammable(cell.y) && isFlammable(cell.z);
}

uvec4 simulateNeighborhood(uvec4 particles) {
  // Sand rules
  if (particles.x == SAND && particles.z <= LIQUID) return particles.zyxw;
  else if (particles.x == SAND && particles.w <= LIQUID) return particles.wyzx;
  else if (particles.y == SAND && particles.w <= LIQUID) return particles.xwzy;
  else if (particles.y == SAND && particles.z <= LIQUID) return particles.xzyw;
  // Water rules
  else if (particles.x == WATER && particles.z < WATER) return particles.zyxw;
  else if (particles.x == WATER && particles.w < WATER) return particles.wyzx;
  else if (particles.y == WATER && particles.w < WATER) return particles.xwzy;
  else if (particles.y == WATER && particles.z < WATER) return particles.xzyw;
  else if (particles.x == WATER && particles.y < WATER) return particles.yxzw;
  else if (particles.y == WATER && particles.x < WATER) return particles.yxzw;
  else if (particles.z == WATER && particles.w < WATER) return particles.xywz;
  else if (particles.w == WATER && particles.z < WATER) return particles.xywz;
  // Smoke rules
  else if (particles.z == SMOKE && particles.x < SMOKE) return particles.zyxw;
  else if (particles.z == SMOKE && particles.y < SMOKE) return particles.xzyw;
  else if (particles.z == SMOKE && particles.w < SMOKE) return particles.xywz;
  else if (particles.w == SMOKE && particles.y < SMOKE) return particles.xwzy;
  else if (particles.w == SMOKE && particles.x < SMOKE) return particles.wyzx;
  else if (particles.w == SMOKE && particles.z < SMOKE) return particles.xywz;
  // Fire rules
  else if (particles.x == FIRE && isFlammable(particles.z)) return particles.xyxw;
  else if (particles.x == FIRE && isFlammable(particles.y)) return particles.xxzw;
  else if (particles.y == FIRE && isFlammable(particles.w)) return particles.xyzy;
  else if (particles.y == FIRE && isFlammable(particles.x)) return particles.yyzw;
  else if (particles.z == FIRE && isFlammable(particles.x)) return particles.zyzw;
  else if (particles.z == FIRE && isFlammable(particles.w)) return particles.xyzz;
  else if (particles.w == FIRE && isFlammable(particles.y)) return particles.xwzw;
  else if (particles.w == FIRE && isFlammable(particles.z)) return particles.xyww;
  else if (particles.x == FIRE && !isFlammable(particles.yzw)) return uvec4(AIR, particles.yzw);
  else if (particles.y == FIRE && !isFlammable(particles.xzw)) return uvec4(particles.x, SMOKE, particles.zw);
  else if (particles.z == FIRE && !isFlammable(particles.xyw)) return uvec4(particles.xy, AIR, particles.w);
  else if (particles.w == FIRE && !isFlammable(particles.xyz)) return uvec4(particles.xyz, SMOKE);
  // Oil rules
  else if (particles.x == OIL && particles.z < OIL) return particles.zyxw;
  else if (particles.x == OIL && particles.w < OIL) return particles.wyzx;
  else if (particles.y == OIL && particles.w < OIL) return particles.xwzy;
  else if (particles.y == OIL && particles.z < OIL) return particles.xzyw;
  else if (particles.x == OIL && particles.y < OIL) return particles.yxzw;
  else if (particles.y == OIL && particles.x < OIL) return particles.yxzw;
  else if (particles.z == OIL && particles.w < OIL) return particles.xywz;
  else if (particles.w == OIL && particles.z < OIL) return particles.xywz;
  return particles;
}

void writeParticlesToImage(uvec4 particles, ivec2 corner) {
  imageStore(buf, corner, uvec4(particles.x));
  imageStore(buf, corner + ivec2(1, 0), uvec4(particles.y));
  imageStore(buf, corner + ivec2(0, -1), uvec4(particles.z));
  imageStore(buf, corner + ivec2(1, -1), uvec4(particles.w));
}

void writeToBlock(ivec2 texCoord, ivec2 offset) {
  uvec4 particles = simulateNeighborhood(getNeighborhood(texCoord + offset));
  writeParticlesToImage(particles, texCoord + offset);
}

void main() {
  ivec2 texCoord = ivec2(gl_LocalInvocationID * 2) + ivec2(0, 2);

  switch (iteration % 4) {
    case 0u:
      // writeParticlesToImage(uvec4(1), texCoord);
      writeToBlock(texCoord, ivec2(0,  0)); // Phase 1
      break;
    case 1u:
      // writeParticlesToImage(uvec4(2), texCoord + ivec2(1, -1));
      writeToBlock(texCoord, ivec2(1, -1)); // Phase 2
      break;
    case 2u:
      // writeParticlesToImage(uvec4(3), texCoord + ivec2(0, -1));
      writeToBlock(texCoord, ivec2(0, -1)); // Phase 3
      break;
    case 3u:
      // writeParticlesToImage(uvec4(4), texCoord + ivec2(1, 0));
      writeToBlock(texCoord, ivec2(1,  0)); // Phase 4
      break;
  }


  // imageStore(buf, texCoord, uvec4(1));
}